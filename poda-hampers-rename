#!/bin/sh

set -e

# I would have used realpath but I there are systems that are *really* old
# and don't have realpath yet, so I copied this from Stack Overflow answer,
# so credit to the answer author: Eugen Konkov. Very nice trick.
# - https://stackoverflow.com/a/31605674
#
# Adapted to apply only to directories. Otherwise the realpath for "."
# would be /some/dir/.
realdir() {
    echo "$(cd "$1"; pwd)"
}

print_help() {
    echo "usage: poda-hampers-rename [options] <oldname> <newname>"
    echo
    echo "Options:"
    echo "  -H  --hostname    Sets the hostname for this hamper"
    echo "  -n  --nohost      Sets the hostname for this hamper to __NOHOST"
    echo "  -h  --help        Prints this help message"
    echo
    echo "Note: Hamper names must be unique across each hostname. This implies"
    echo "      that for hampers without host (-n), hampernames must be unique"
    echo "      across all your systems (at least across each poda domain)."
    echo
}

[ -z "${PODADIR}" ] && PODADIR=$HOME/.poda

[ ! -f "${PODADIR}/hostname" ] && {
    echo "Invalid Poda directory: ${PODADIR} - Maybe run poda init?"
    exit 1
}

HOSTNAME="$(cat "${PODADIR}"/hostname)"

# poda-hampers-rename -m HOST oldname newname
# poda-hampers-rename -n oldname newname

# [ ! -z ] ---> [ -n ]
while [ -n "$1" ]; do
    case "$1" in
    --hostname|-H)
        HOSTNAME="$2"
        shift
        ;;
    --nohost|-n)
        HOSTNAME="__NOHOST"
        ;;
    --help|-h)
        print_help
        exit 0
        ;;
    *)
        # From first unknown parameter and on, consider it "the rest" of
        # the argument list, this is: <oldname> <newname>
        break;
    esac
    shift
done

if [ ! "$#" -eq 2 ]; then
    print_help >&2
    exit 1;
fi

OLDNAME="$1"
shift

NEWNAME="$1"
shift

echo "Updating hamper name..." > /dev/stderr
FOUND=0
while read -r HO HA BD FE; do
    if [ "$HO" = "${HOSTNAME}" ] && [ "$HA" = "${OLDNAME}" ]; then
        FOUND=1
        printf "%-16s %-16s %-36s %s\n" \
            "${HO}" "${NEWNAME}" "${BD}" "${FE}" \
            >> "${PODADIR}/hampers.new"
    else
        printf "%-16s %-16s %-36s %s\n" \
            "${HO}" "${HA}" "${BD}" "${FE}" \
            >> "${PODADIR}/hampers.new"
    fi
done < "${PODADIR}/hampers"

if [ "$FOUND" -eq "0" ]; then
    rm "${PODADIR}/hampers.new"
    echo "Hamper not found. Quitting without changes." > /dev/stderr
    exit 1
fi

echo "Renaming index directory..." > /dev/stderr
mv "${PODADIR}/indexes/${HOSTNAME}/${OLDNAME}" "${PODADIR}/indexes/${HOSTNAME}/${NEWNAME}" || {
    echo "Directory rename failed! Quitting without changes."
    exit 1
}

mv "${PODADIR}/hampers.new" "${PODADIR}/hampers"

echo "Updating index..." > /dev/stderr
sed -i -re 's,^([^ ]+ [^ ]+ [^ ]+ [^ ]+ [^ ]+ [^ ]+) '"${OLDNAME}"' \./,\1 '"${NEWNAME}"' ./,' "${PODADIR}/indexes/${HOSTNAME}/${NEWNAME}/index"

echo "Updating duplicate files report..." > /dev/stderr
sed -i -re 's,^([^ ]+ [^ ]+ [^ ]+ [^ ]+ [^ ]+ [^ ]+) '"${OLDNAME}"' \./,\1 '"${NEWNAME}"' ./,' "${PODADIR}/indexes/${HOSTNAME}/${NEWNAME}/duplicate-files"

echo "done."
