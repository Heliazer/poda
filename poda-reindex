#!/bin/bash

set -e

export LC_ALL=C

# I would have used realpath but I there are systems that are *really* old
# and don't have realpath yet, so I copied this from Stack Overflow answer,
# so credit to the answer author: Eugen Konkov. Very nice trick.
# - https://stackoverflow.com/a/31605674
realpath() {
    echo "$(cd "$(dirname "$1")"; pwd)/$(basename "$1")"
}

[ -z "${PODADIR}" ] && PODADIR=$HOME/.poda
PODADIR=$(realpath "${PODADIR}")

[ ! -f "${PODADIR}/hostname" ] && {
    echo "Cannot find ${PODADIR}/hostname - Run poda-init first."
    exit 1
}
HOSTNAME=$(cat "${PODADIR}/hostname")

[ ! -f "${PODADIR}/hampers" ] && {
    echo "Cannot find any hamper definition - Run poda-hamper-add first."
    exit 1
}

[ "$#" -eq 0 ] && {
    echo "Hamper required. The following hampers are available:"
    while read -r HOSTNAME HAMPER _ELSE_; do
        echo " - ${HAMPER}"
    done < "${PODADIR}/hampers"
    exit 1
}

if [ -z "$1" ]; then
    echo "You must specify what hamper to (re-)index"
    exit 1
fi
HAMPER="$1"

read -r _H_ _X_ BASEDIR FINDEXPR < <(grep "^[^ ]* \+${HAMPER} " "${PODADIR}/hampers")

BASEDIR="$(realpath "${BASEDIR}")"

INDEXDIR="${PODADIR}/indexes/${HOSTNAME}/${HAMPER}"
mkdir -p "${INDEXDIR}"

#START ACTUAL WORK

echo -n "Recreating old preindex... "
# cat .poda/index | while read M S D T Z F; do echo "================================ $S $D $T $Z $H $V $F"; done | sort -s > .poda/old-preindex
# replace md5sum hash with equal signs (in the above pseudocode replace M with signs
# comm --output-delimiter '================================ ' -3 <(true) <(cut -b 34- .poda/index | sort -s) | sort -s > .poda/old-preindex
touch "${INDEXDIR}/index"
cut -b 34- < "${INDEXDIR}/index" | sed -re 's/^/================================ /g' | sort -s > "${INDEXDIR}/old-preindex"
echo done.

echo -n "Creating new preindex... "
pushd "${BASEDIR}" > /dev/null || { echo "Could not switch to ${BASEDIR}. Exiting."; exit 1; }
# shellcheck disable=SC2086
find ${FINDEXPR} -name '.poda' -type d -prune -o -type f -size +0 -print0 | xargs -0 stat --printf "================================ %018s %y ${HOSTNAME} ${HAMPER} %n\n" -- > "${INDEXDIR}/new-preindex-unsorted"
popd > /dev/null
echo -n "sorting... "
sort < "${INDEXDIR}/new-preindex-unsorted" > "${INDEXDIR}/new-preindex"
echo done.

echo -n "Finding which files have not changed... "
# comm --output-delimiter='================================ ' -1 -2 "${INDEXDIR}"/old-preindex "${INDEXDIR}"/new-preindex > "${INDEXDIR}"/new-preindex-keep
#comm -1 -2 "${INDEXDIR}"/old-preindex "${INDEXDIR}"/new-preindex | sed -re 's/^	/================================ /g' > "${INDEXDIR}"/new-preindex-keep
comm -1 -2 "${INDEXDIR}/old-preindex" "${INDEXDIR}/new-preindex" > "${INDEXDIR}/new-preindex-keep"
echo done.

echo -n "Finding which files have changed... "
# comm --output-delimiter='================================ ' -1 -3 "${INDEXDIR}"/old-preindex "${INDEXDIR}"/new-preindex > "${INDEXDIR}"/new-preindex-calculate
#comm -1 -3 "${INDEXDIR}"/old-preindex "${INDEXDIR}"/new-preindex | sed -re 's/^       /================================ /g' > "${INDEXDIR}"/new-preindex-calculate
comm -1 -3 "${INDEXDIR}/old-preindex" "${INDEXDIR}/new-preindex" > "${INDEXDIR}/new-preindex-calculate"
echo done.

echo -n "Reusing old hashes for files that have not changed... "
cat "${INDEXDIR}/index" "${INDEXDIR}/new-preindex-keep" | sort -k 2 -s | uniq -s 32 -D | (grep -v '^=' || true) > "${INDEXDIR}/new-index-kept"
echo done.

echo -n "Recalculating hashes for files that have changed... "
BS=131072
while read -r M SIZE DATE TIME ZONE _HOST_ HAMPER FILE; do
  if [ -r "${BASEDIR}/${FILE}" ]; then # find used -readable, but things may have changed
    [ "$((10#$SIZE))" -eq "0" ] && continue
    if [ "$((10#$SIZE))" -lt "$((BS * 256))" ]; then
      SUM=$(md5sum "${BASEDIR}/${FILE}" | cut -b -32)
    else
      #echo SIZE: $SIZE $((10#$SIZE)) > /dev/stderr
      BLOCKS=$(((10#$SIZE-BS)/BS))
      #echo BLOCKS: $BLOCKS > /dev/stderr
      RC=$(root=0; while [ "$((root * root))" -le "$BLOCKS" ]; do root=$((root+1)); done; echo $((root-1)))
      #echo RC: $RC > /dev/stderr
      mEVERY=$((1000*BLOCKS/RC))
      #echo mEVERY: $mEVERY > /dev/stderr
      SUM=$( (for M in $(seq 0 $((RC-1))); do dd bs=$BS skip=$((M*mEVERY/1000)) count=1 if="${BASEDIR}/${FILE}"; done; dd bs=$BS skip=$BLOCKS if="${BASEDIR}/${FILE}") 2> /dev/null | md5sum | cut -b -32)
    fi
    if [ "$SUM" != "" ]; then # only print if md5sum did not fail
      echo "$SUM" "$SIZE" "$DATE" "$TIME" "$ZONE" "${HOSTNAME}" "${HAMPER}" "${FILE}"
    fi
  else
    #echo Cannot read: "${FILE}" >&2
    :
  fi
done < "${INDEXDIR}/new-preindex-calculate" > "${INDEXDIR}/new-index-calculated"
echo done.

echo -n "Concatenating reused and new data into new index... "
cat "${INDEXDIR}/new-index-kept" "${INDEXDIR}/new-index-calculated" | sort -s > "${INDEXDIR}/new-index"
echo done.

echo -n "Creating duplicates report... "
sort -k 2,2r "${INDEXDIR}/new-index" | uniq -w 51 --all-repeated=separate > "${INDEXDIR}/duplicate-files"
echo done.

echo -n "Replacing old index with new one and cleaning up... "
mv "${INDEXDIR}/new-index" "${INDEXDIR}/index"
rm "${INDEXDIR}"/new-*
rm "${INDEXDIR}"/old-*
echo done.
echo
echo Reindex completed successfully.
